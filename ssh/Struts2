Struts：web开发框架（MVC)
初始化：web应用启动，初始化ActionServlet，读取配置信息，存到ActionMapping。
响应流程：
1、创建ActionMapping，包含把请求转发给哪个action的信息；
2、创建ActionForm，保存客户提交的表单数据；
3、是否要表单验证；
4、ActionServlet根据配置决定请求转发给哪个action，调用execute方法；
5、返回ActionForward，ActionServlet把请求转发给ActionForward对象指向的jsp组件；
6、JSP组件生成动态网页，返回给客户。

Struts2运行过程：
1、客户端请求
2、通过ActionContextCleanUp->FilterDispatcher
3、FilterDispatcher通过ActionMapper来决定此request需要调用哪个Action
4、如ActionMapper决定调用哪个Action，FilterDispatcher把请求的处理交给ActionProxy，这里
已转到它的Delegate--Dispatcher执行
5、ActionProxy根据ActionMapper和ConfigurationManager找到需要调用的Action类
6、ActionProxy创建ActionInvocation实例
7、ActionInvocation调用真正的Action
8、Action执行完毕，ActionInvocation创建Result并返回

Struts2开发步骤：
1、web.xml定义核心Filter拦截用户请求,web.xml位于WebContent/WEB-INF文件夹下
<filter>
	<filter-name>struts2</filter-name>
	<filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>struts2</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
2、如是POST提交请求，定义包含表单数据的jsp页面
3、定义处理请求的Action类
4、在struts.xml中配置Action,struts.xml位于WebContent/WEB-INF/classes文件夹下
<constant name="struts.devMode" value="true" />
<package name="..." extends="struts-default">
	<action name="login" class="dps.action.LoginAction">
		<result name="success">loginSuccess.jsp</result>
	</action>
</package>
5、配置处理结果和物理资源视图间的对应关系
6、编写视图资源（jsp页面）

Action接口
一般继承ActionSupport，并实现execute方法。

Struts2配置文件
web.xml:配置Struts2过滤器，把整个web流程转入到struts2框架中
Struts.xml:配置Action，定义Action执行后的动作，是调整jsp页面还是执行一个新的Action。可拆分，include汇总。
a、Action名字不能重复
b、默认Action执行execute方法，若改变默认执行方法，使用method属性指定
c、result标签name属性默认值是success

Struts2标签:控制标签、数据标签、表单标签、Ajax标签
Struts2标签以s开头,使用Struts2标签，文件需包含：<%@ taglib prefix="s" uri="/struts-tags" %\>

控制标签
if、else标签：
<s:if ...>...</s:if>
<s:elseif ...>...</s:elseif>
<s:else>...</s:else>
迭代标签：
<s:iterator value="days">
	<p>day is: <s:property/></p>
</s:iterator>
融合标签merge、附加标签append、生成器标签generator

数据标签
操作标签：知道操作名称来从jsp页面直接调用操作
<s:action name="..." executeResult="true" />
包含标签：在jsp中包含另一个jsp
<s:include value="...jsp">
	<s:param name='...' value='...' />
</s:include>
bean标签：实例化符合javabean规范的类，
<s:bean name="..." var="...">
	<s:param name="..." value=".."/>
</s:bean>
日期标签：设置日期格式
<s:date name="..." ...>
参数标签：name(字符串)--参数名称；value(对象)--参数的值
属性标签：获取值的属性
<s:property value="..." />
push标签：栈中push值的简单操作
<s:push value="...">...</s:push>
set标签：将值赋给指定范围中的变量
<s:set name="..." value="..."/>
文本标签：呈现I18n文本消息
<s:text name="..."/>
url标签：<a href="<s:url action='hello' />">Hello World</a>
带参数url标签：
	<s:url action="hello" var="hellolink">
		<s:param name="userName">Bruce Phillips</s:param>
	</s:url>
	<p><a href="${hellolikn}">Hello Bruce Phillips</a>

表单标签
form标签：
	<s:form action="hello">
		<s:textfield name="userName" label="Your name" />
		<s:submit value="Submit" />
	</s:form>

Ajax标签:struts2-dojo-plugin-2.2.3.jar添加到lib里



JSP模板：
<!DOCTYPE html>
<%@ page language="java" contentType="text/html; charset=${encoding}"
    pageEncoding=${encoding}"%>
<%@ taglib prefix="s" uri="/struts-tags" %>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=${encoding}">
<title>Insert title here</title>
</head>
<body>
${cursor}
</body>
</html>

struts.xml模板：
<?xml version="1.0" encoding="${encoding}"?>
<!DOCTYPE struts PUBLIC
		"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
		"http://struts.apache.org/dtds/struts-2.5.dtd">
<struts>
${cursor}
</struts>

Log4j2 日志模块
1、添加log4j的核心jar包到lib下，包括core、api、web；
2、写日志：
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
private static final Logger logger = LogManager.getLogger(HelloWorldAction.class);
3、src下配置log4j2.xml文件，测试可以添加log4j2-test.xml优先，配置模板：
<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
	<!--先定义所有的appender-->
	<appenders>
		<!--这个输出控制台的配置-->
		<console name="Console" target="SYSTEM_OUT">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
			<!--输出日志的格式-->
			<!-- %d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n -->
			<!-- %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n -->
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
		</console>
		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用,false则清空-->
		<!-- fileName="${web:rootDir}/app.log" 需引入含web的log4j jar包-->
		<File name="log" fileName="log/test.log" append="false">
			<PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
		</File>
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileInfo" fileName="${sys:user.home}/logs/info.log"
			filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->        
			<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="100 MB"/>
			</Policies>
		</RollingFile>
		<RollingFile name="RollingFileWarn" fileName="${sys:user.home}/logs/warn.log"
			filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="100 MB"/>
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
			<DefaultRolloverStrategy max="20"/>
		</RollingFile>
		<RollingFile name="RollingFileError" fileName="${sys:user.home}/logs/error.log"
			filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="100 MB"/>
			</Policies>
		</RollingFile>
	</appenders>
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
	<loggers>
	<!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
		<logger name="org.springframework" level="INFO"></logger>
		<logger name="org.mybatis" level="INFO"></logger>
		<root level="all">
			<appender-ref ref="Console"/>
			<!-- ref的值为appdenders中对应的name的值 -->
			<appender-ref ref="log"/>
			<appender-ref ref="RollingFileInfo"/>
			<appender-ref ref="RollingFileWarn"/>
			<appender-ref ref="RollingFileError"/>
		</root>
	</loggers>
	<!-- http://www.cnblogs.com/hafiz/p/6170702.html -->
	<!-- http://logging.apache.org/log4j/2.x/manual/lookups.html#Log4jConfigLookup -->
</configuration>


国际化
1、src下创建国际化资源文件：如msg_en_US.properties/msg_zh_CN.properties
2、struts配置
	<!-- 设置Struts对web页面的解码方式 -->
	<constant name="struts.i18n.encoding" value="UTF-8"></constant>
	<constant name="struts.custom.i18n.resources" value="msg"></constant>
3、编写jsp页面
4、包范围资源文件：包的根路径下建立多个package_language_country.properties文件
5、Action范围资源文件：在Action类文件所在路径下建立多个文件名为ActionName_language_country.properties
6、临时指定资源文件
<s:i18n name="temp">
...
</s:i18n>
